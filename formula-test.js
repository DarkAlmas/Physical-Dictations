document.addEventListener('DOMContentLoaded', () => {
    console.log('–°–∫—Ä–∏–ø—Ç formula-test.js –∑–∞–≥—Ä—É–∂–µ–Ω!');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const buttons = document.querySelectorAll('.formula-test-button');
    const modal = document.getElementById('formula-test-modal');
    const closeButton = document.querySelector('.close-button');
    const testTitle = document.getElementById('test-title');
    const testProgress = document.getElementById('test-progress');
    const testContent = document.getElementById('test-content');
    const submitButton = document.getElementById('submit-formula');
    const testFeedback = document.getElementById('test-feedback');

    if (!buttons.length || !modal || !closeButton || !testTitle || !testProgress || !testContent || !submitButton || !testFeedback) {
        console.error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã:', {
            buttons: buttons.length,
            modal: !!modal,
            closeButton: !!closeButton,
            testTitle: !!testTitle,
            testProgress: !!testProgress,
            testContent: !!testContent,
            submitButton: !!submitButton,
            testFeedback: !!testFeedback
        });
        return;
    }
    console.log('–ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫:', buttons.length);

    let currentDictation = null;
    let questions = [];
    let currentQuestionIndex = 0;
    let score = 0;

    // –ó–∞–≥—Ä—É–∑–∫–∞ JSON
    fetch('dictations.json')
        .then(response => {
            if (!response.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å dictations.json');
            return response.json();
        })
        .then(data => {
            const dictations = data.dictations;
            console.log('JSON –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ –¥–∏–∫—Ç–∞–Ω—Ç–æ–≤:', dictations.length);

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å —Å–æ–±—ã—Ç–∏–µ–º GA4
            buttons.forEach(button => {
                button.addEventListener('click', () => {
                    console.log('–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞:', button.parentElement.dataset.dictationId);
                    const dictationId = button.parentElement.dataset.dictationId;
                    currentDictation = dictations.find(d => d.id === dictationId);
                    if (!currentDictation) {
                        console.error('–î–∏–∫—Ç–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', dictationId);
                        return;
                    }
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ test_started
                    gtag('event', 'test_started', {
                        'dictation_id': dictationId
                    });
                    testTitle.textContent = `–¢–µ—Å—Ç –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º: ${currentDictation.title}`;
                    questions = generateQuestions(currentDictation);
                    currentQuestionIndex = 0;
                    score = 0;
                    showQuestion();
                    modal.style.display = 'block';
                });
            });

            // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            closeButton.addEventListener('click', () => {
                modal.style.display = 'none';
                resetTest();
            });

            // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            window.addEventListener('click', (event) => {
                if (event.target === modal) {
                    modal.style.display = 'none';
                    resetTest();
                }
            });

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 6 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            function generateQuestions(dictation) {
                const formulas = dictation.formulas;
                if (!formulas || formulas.length === 0) return [];
                const selectedFormulas = [];
                while (selectedFormulas.length < Math.min(6, formulas.length)) {
                    const formula = formulas[Math.floor(Math.random() * formulas.length)];
                    if (!selectedFormulas.includes(formula)) {
                        selectedFormulas.push(formula);
                    }
                }
                return selectedFormulas.map(formula => ({
                    question: `–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –¥–ª—è "${formula.name}":`,
                    correctAnswer: formula.formula,
                    description: formula.description,
                    wrongAnswers: getWrongAnswers(formulas, formula.formula)
                }));
            }

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            function getWrongAnswers(formulas, correctAnswer) {
                const wrongAnswers = [];
                while (wrongAnswers.length < 3) {
                    const randomFormula = formulas[Math.floor(Math.random() * formulas.length)].formula;
                    if (randomFormula !== correctAnswer && !wrongAnswers.includes(randomFormula)) {
                        wrongAnswers.push(randomFormula);
                    }
                }
                return wrongAnswers;
            }

            // –ü–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞
            function showQuestion() {
                if (currentQuestionIndex >= questions.length) {
                    testContent.innerHTML = `
                        <p>–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${score}/${questions.length}</p>
                        <p>${score === questions.length ? '–ë—Ä–∞–≤–æ, —Ñ–∏–∑–∏–∫-–≥—É—Ä—É! üåü' : '–ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üòè'}</p>
                    `;
                    testProgress.innerHTML = '';
                    testFeedback.innerHTML = '';
                    submitButton.style.display = 'none';
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ test_completed
                    gtag('event', 'test_completed', {
                        'dictation_id': currentDictation.id,
                        'score': score,
                        'total_questions': questions.length
                    });
                    MathJax.typeset();
                    return;
                }

                const question = questions[currentQuestionIndex];
                const options = [question.correctAnswer, ...question.wrongAnswers].sort(() => Math.random() - 0.5);

                testContent.innerHTML = `
                    <p class="test-question">${question.question}</p>
                    <div class="test-options">
                        ${options.map((option, index) => `
                            <label>
                                <input type="radio" name="formula" value="${option}" data-index="${index}">
                                <span class="formula-option">\\(${option}\\)</span>
                            </label>
                        `).join('')}
                    </div>
                `;
                testProgress.innerHTML = `–í–æ–ø—Ä–æ—Å ${currentQuestionIndex + 1} –∏–∑ ${questions.length}`;
                testFeedback.innerHTML = '';
                submitButton.disabled = false;
                submitButton.style.display = 'block';

                MathJax.typeset();
            }

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ —Å —Å–æ–±—ã—Ç–∏–µ–º GA4
            submitButton.onclick = () => {
                const selected = testContent.querySelector('input[name="formula"]:checked');
                if (!selected) {
                    testFeedback.innerHTML = '<p style="color: red;">–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç, —Ö–∏—Ç—Ä–µ—Ü! üòú</p>';
                    return;
                }

                const userAnswer = selected.value;
                const question = questions[currentQuestionIndex];
                const isCorrect = userAnswer === question.correctAnswer;
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ test_answer_submitted
                gtag('event', 'test_answer_submitted', {
                    'dictation_id': currentDictation.id,
                    'question_number': currentQuestionIndex + 1,
                    'is_correct': isCorrect
                });

                if (isCorrect) {
                    score++;
                    testFeedback.innerHTML = '<p style="color: green;">–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –¢—ã –º–æ–ª–æ–¥–µ—Ü! üöÄ</p>';
                } else {
                    testFeedback.innerHTML = `
                        <p style="color: red;">–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. üò¢ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞:</p>
                        <p>\\(${question.correctAnswer}\\)</p>
                        <p>${question.description}</p>
                    `;
                    MathJax.typeset();
                }

                submitButton.disabled = true;
                setTimeout(() => {
                    currentQuestionIndex++;
                    showQuestion();
                }, 2000);
            };

            // –°–±—Ä–æ—Å —Ç–µ—Å—Ç–∞
            function resetTest() {
                testContent.innerHTML = '';
                testProgress.innerHTML = '';
                testFeedback.innerHTML = '';
                testTitle.textContent = '';
                submitButton.disabled = true;
                submitButton.style.display = 'block';
                questions = [];
                currentQuestionIndex = 0;
                score = 0;
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON:', error);
            testContent.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö! üò¢</p>';
            submitButton.disabled = true;
        });
});